[tool.poetry]
name = "grpc-gateway"
version = "0.0.1"
description = "Python gRPC Gateway"
authors = ["so1n <so1n897046026@gmail.com>"]
license = "Apache Software License"
readme = "./README.md"
repository = "https://github.com/python-pai/grpc-gateway"
homepage = "https://github.com/python-pai/grpc-gateway"
packages = [{include = "grpc_gateway"}]

[tool.poetry.urls]
"Source" = "https://github.com/python-pai/grpc-gateway"
"Tracker" = "https://github.com/python-pai/grpc-gateway/issue"
"Changelog" = "https://github.com/python-pai/grpc-gateway/pait/blob/master/CHANGELOG.md"
"Documentation" = "https://so1n.me/pait/"

[tool.poetry.dependencies]
python = "^3.8"
pait = "1.0.0a13"
protobuf-to-pydantic = "^0.2.0.2"
jinja2 = {version = ">=2.0.0", optional = true}

[tool.poetry.extras]
template = ["jinja2"]
all = ["jinja2"]

[tool.poetry.group.test.dependencies]
requests = "2.25.1"
pytest = "6.2.5"
coverage = "5.5"
pytest-mock = "3.5.1"
python-multipart = "0.0.5"
pytest-asyncio = "0.14.0"
pytest-profiling = "1.7.0"
mypy-protobuf = "3.2.0"
lark = "^1.1.2"
protobuf = "3.20.3"

[tool.poetry.group.framework.dependencies]
werkzeug = "2.2.2"
Flask = "2.2.2"
sanic = "23.6.0"
sanic-testing = "23.6.0"
tornado = "6.2"
uvicorn = "0.22.0"
starlette = "0.27.0"
httpx = "0.24.1"
fastapi="0.103.2"
# Do not run fastapi directly in a dev environment, but run it in tox(with fastapi) environment.
# Because it has too many dependencies, there will be test environment dependency conflicts
# fastapi = "0.65.0"


[tool.poetry.scripts]
protoc-gen-route = "grpc_gateway.protobuf_plugin.main:main"

[tool.protobuf-to-pydantic.format]
black = true
isort = true
autoflake = true

[tool.autoflake]
in-place = true
remove-all-unused-imports = true
remove-unused-variables = true
ignore-init-module-imports = true

[tool.black]
line-length = 120
target-version = ['py37']

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120

[tool.mypy]
ignore_missing_imports = true
disallow_untyped_defs = true
python_executable = ".venv/bin/python"
exclude = [
    "^example/example_grpc/python_example_proto_code/example_proto",
    "^grpc_gateway/proto",
]

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source = [
    "grpc_gateway",
    # ".tox/*lib/python*/site-packages/tox",
]
omit = [
    "grpc_gateway/protobuf_plugin/*",
    "grpc_gateway/proto/*",
    "grpc_gateway/__version__.py"
]

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "continue",

    # type hints
    "if TYPE_CHECKING:",
    "pass",
]

[tool.poetry-dynamic-versioning]
enable = false
metadata=false
vcs = "git"
format = "v{base}-{stage}.{revision}"


[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"
