from dataclasses import dataclass
from typing import TYPE_CHECKING

from grpc_gateway.model import GrpcServiceOptionModel
from grpc_gateway.protobuf_types import MethodDescriptorProto, ServiceDescriptorProto

if TYPE_CHECKING:
    from grpc_gateway.protobuf_plugin.field_desc_proto_to_route_code import FileDescriptorProtoToRouteCode


@dataclass()
class GrpcTemplateVarModel(object):
    #############
    # meta data #
    #############

    # RPC Method maps the index of the routeã€‚
    # Usually there is only one map route per RPC method,
    # but you can add one or more route mappings through `additional_bindings`
    index: int
    # The attribute name prefix that the route gateway binds to the Web framework instance
    attr_prefix: str
    # The name of the protobuf file
    filename: str
    # The name of the route gateway
    gateway_name: str

    ################################
    # template value from protobuf #
    ################################

    # e.g:
    #   protobuf file:
    #       package user_info;
    #                 ^
    #                package
    #
    #       service UserInfoService {
    #                 ^
    #               service name
    #           rpc GetUserInfo (GetUserInfoRequest) returns (GetUserInfoResponse) {}
    #                 ^             ^                           ^
    #               method      request message              response message
    #       }
    #
    #   protoc auto gen var:
    #       grpc_method_url = /user_info.UserInfoService/GetUserInfo (/{package}.{service_name}/{method_name})
    #       message filename = user_info_pb2.py
    #       model filename = user_info_p2p.py
    #       stub filename = user_info_pb2_grpc.py
    #
    #   grpc-gateway gen var:
    #
    #       input_type_name =  GetUserInfoRequest  (request message)
    #       output_type_name = GetUserInfoResponse  (response message)

    #       grpc_method_url = /user_info-UserInfoService/GetUserInfo (/{package}-{service_name}/{method_name})
    #       method = GetUserInfo (method)
    #       func_name = GetUserInfo_route ({method}_route)

    #       Note:
    #         1.user_info_p2p file holds the pydantic model generated by the protobuf message
    #         2.Normally, request_message_model_name is equal to request_message_name,
    #           but after using 'exclude_column_name' or 'nested',
    #           the structure of the request_message_model_name will change,
    #           and the request_message_model_name and request_message_name are not equal

    #       request_message_model_name = user_info_p2p.GetUserInfoRequest
    #       response_message_model_name = user_info_p2p.GetUserInfoResponse
    #       request_message_name = user_info_pb2.GetUserInfoRequest
    #       response_message_name = user_info_pb2.GetUserInfoResponse
    #       stub_service_name = UserInfoService_stub ({service name}_stub)
    #       service_name = UserInfoService (service name)
    #       model_module_name = user_info_p2p ({package}_p2p)
    #       message_module_name = user_info_pb2 ({package}_pb2)
    #       stub_module_name = user_info_pb2_grpc ({package}_pb2_grpc)
    #       package = user_info (package)
    #       # (package.title().replace("_", "") + output_type_name + "JsonResponseModel")
    #       response_class_name = UserInfoGetUserInfoResponseJsonResponseModel

    input_type_name: str
    output_type_name: str
    grpc_method_url: str
    method: str
    func_name: str
    request_message_model_name: str
    response_message_model_name: str
    request_message_name: str
    response_message_name: str
    stub_service_name: str
    service_name: str
    model_module_name: str
    message_module_name: str
    stub_module_name: str
    package: str
    response_class_name: str
    # option model
    grpc_service_option_model: GrpcServiceOptionModel
    # grpc descriptor
    grpc_descriptor_service: ServiceDescriptorProto  # protobuf descriptor (by grpc service)
    grpc_descriptor_method: MethodDescriptorProto   # protobuf descriptor (by grpc method)
    # plugin gen code
    gen_code: "FileDescriptorProtoToRouteCode"
